# import libraries
import os
import pandas as pd
import streamlit as st
import numpy as np
from sklearn import datasets
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import OrdinalEncoder
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.feature_extraction.text import CountVectorizer
ode = OrdinalEncoder(sparse = False)


# Header
st.write("""
# Simple ML Application
""")

# clean file
def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep]

# upload training file
dfTrain = pd.DataFrame()
cols = []
uploaded_file = st.file_uploader("Choose a file to train the model")
if uploaded_file is not None:
  dfTrain = pd.read_csv(uploaded_file)
  dfTrain = clean_dataset(dfTrain)
  st.write(dfTrain)
  cols = dfTrain.columns.tolist()

# selecting target, features, & type of model
y = st.selectbox(
   'What column is the target?',
    cols)
x = st.multiselect(
    'What columns would you like to use in the model?',
    cols
)
#super = st.selectbox(
#    'Is this classification or regression?',
#    ('classification', 'regression')
#)


st.write(x)

# Train decision tree
def dtr_model(x,y):
    dtr = DecisionTreeRegressor(max_depth=5)
    return dtr.fit(x,y)


# Train model
def listToString(s):
    str1 = ", "
    return (str1.join(s))

def train_model():
    st.write('You are using', listToString(x), 'to predict', y, 'with ', dtr_model(dfTrain[x], dfTrain[y]), 'algorithm')
    return dtr_model(dfTrain[x], dfTrain[y])

# upload testing file
dfTest = pd.DataFrame()
uploaded_file = st.file_uploader("Choose a file to test the model")
if uploaded_file is not None:
  dfTest = pd.read_csv(uploaded_file)
  dfTest = clean_dataset(dfTrain)
  st.write(dfTest)
  cols = dfTest.columns.tolist()


# Make predictions
if st.button('Test Model'):
    fitModel = train_model()
    predict = fitModel.predict(dfTest[x])
    dfTest = dfTest.assign(prediction = predict)
    st.write(dfTest)
